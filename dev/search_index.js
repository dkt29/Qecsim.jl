var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Qecsim","page":"API","title":"Qecsim","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Qecsim","category":"page"},{"location":"api/#Qecsim","page":"API","title":"Qecsim","text":"Package for simulating quantum error correction using stabilizer codes.\n\n\n\n\n\n","category":"module"},{"location":"api/","page":"API","title":"API","text":"Modules = [Qecsim]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api/#Qecsim.doubler-Tuple{Number}","page":"API","title":"Qecsim.doubler","text":"doubler(x)\n\nReturn 2x.\n\nExamples\n\njulia> doubler(3)\n6\n\n\n\n\n\n","category":"method"},{"location":"api/#PauliTools","page":"API","title":"PauliTools","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Qecsim.PauliTools]","category":"page"},{"location":"api/#Qecsim.PauliTools","page":"API","title":"Qecsim.PauliTools","text":"Tools for Pauli strings and binary symplectic vectors / matrices.\n\n\n\n\n\n","category":"module"},{"location":"api/#Qecsim.PauliTools.bsp-Tuple{AbstractArray{Bool, N} where N, AbstractArray{Bool, N} where N}","page":"API","title":"Qecsim.PauliTools.bsp","text":"bsp(A::BitArray, B::BitArray)\n\nReturn the binary symplectic product of A with B.\n\nThe binary symplectic product odot is defined as A odot B equiv A Lambda B bmod 2 where Lambda = leftbeginsmallmatrix 0  I  I  0 endsmallmatrixright.\n\nExamples\n\nusing Qecsim: PauliTools as PT\na = BitVector([1, 0, 0, 0])  # XI\nb = BitVector([0, 0, 1, 0])  # ZI\nPT.bsp(a', b)\n# output\n1\n\nusing Qecsim: PauliTools as PT\nstabilizers = BitMatrix(  # 5-qubit stabilizers\n    [1 0 0 1 0 0 1 1 0 0    # XZZXI\n     0 1 0 0 1 0 0 1 1 0    # IXZZX\n     1 0 1 0 0 0 0 0 1 1    # XIXZZ\n     0 1 0 1 0 1 0 0 0 1])  # ZXIXZ\nerror = BitVector([0, 0, 1, 1, 0, 0, 1, 0, 1, 0])  # IZXYI\nPT.bsp(stabilizers, error)\n# output\n4-element Vector{Int64}:\n 0\n 1\n 1\n 0\n\n\n\n\n\n","category":"method"},{"location":"api_index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"api_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"CurrentModule = Qecsim","category":"page"},{"location":"#Qecsim.jl-Quantum-Error-Correction-Simulator","page":"Overview","title":"Qecsim.jl - Quantum Error Correction Simulator","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Qecsim.jl is a Julia package for simulating quantum error correction using stabilizer codes.","category":"page"},{"location":"#Contents","page":"Overview","title":"Contents","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Pages = [\"api.md\", \"api_index.md\"]","category":"page"}]
}
